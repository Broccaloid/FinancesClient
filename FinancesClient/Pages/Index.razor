@page "/"

@using FinancesClient.Data
@using FinancesClient.Services

@inject IFinancesService FinancesService
@inject IJSRuntime JsRuntime

<h1>All operations</h1>

@if (operations == null)
{
    <p><em>Loading...</em></p>
}
else if (operationToChange != null)
{
    <h3>Please, enter new data for the operation</h3>
    <p>Date</p>
    <input @bind="@operationToChange.Date" type="date" />
    <br />
    <br />
    <p>Type</p>
    <input @bind="@operationToChange.Type" />
    <br />
    <br />
    <p>Balance Change</p>
    <input @bind="@operationToChange.BalanceChange" />
    <br />
    <br />
    <button @onclick="ChangeOperation">Save changes</button>
}
else
{
    <ChangableTable Operations="@operations" OnClickChange="SetOperationToChange" OnClickDelete="DeleteOperation" />
}

@code {
    private List<FinancialOperation> operations;
    private FinancialOperation operationToChange;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            operations = await FinancesService.GetAllOperations();
        }
        catch (Exception ex)
        {
            await Alert(ex.Message);
        }
    }

    private void SetOperationToChange(FinancialOperation operation)
    {
        operationToChange = operation;
    }

    private async Task ChangeOperation()
    {
        try
        {
            await FinancesService.ChangeOperation(operationToChange);
            operationToChange = null;
        }
        catch (Exception ex)
        {
            await Alert(ex.Message);
        }
    }

    private async Task DeleteOperation(FinancialOperation operation)
    {
        try
        {
            await FinancesService.DeleteOperation(operation);
            operations.Remove(operation);
        }
        catch (Exception ex)
        {
            await Alert(ex.Message);
        }
    }

    private async Task Alert(string message)
    {
        await JsRuntime.InvokeVoidAsync("Alert", message);
    }
}