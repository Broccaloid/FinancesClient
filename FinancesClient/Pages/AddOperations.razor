@page "/addoperations"

@using FinancesClient.Services
@using FinancesClient.Data

@inject IFinancesService FinancesService
@inject IJSRuntime JsRuntime

<h1>Add Operations</h1>

<h3>Please, enter data for an operation</h3>
<br />
<p>Date</p>
<input @bind="@date" type="date" />
<br />
<br />
<p>Type</p>
<input @bind="@type" />
<br />
<br />
<p>Balance Change</p>
<input @bind="@balanceChange" />
<br />
<br />
<button class="add-button" @onclick="AddOperationToPOSTList">Add To List</button>
<br />

@if (POSTList.Count != 0)
{
<div class="post-list">
    <p>Operations to add:</p>
    <OutputTable Operations="@POSTList" />
    <br />
    <br />
    <button @onclick="POSTOperations">Save All Operations</button>
</div>
}

@code {
    private List<FinancialOperation> POSTList;
    private DateTime date;
    private string type;
    private decimal balanceChange;

    protected override async Task OnInitializedAsync()
    {
        POSTList = new List<FinancialOperation>();
    }

    private void AddOperationToPOSTList()
    {
        POSTList.Add(new FinancialOperation { BalanceChange = balanceChange, Date = date, Type = type });
    }

    private async Task POSTOperations()
    {
        try
        {
            await FinancesService.AddOperations(POSTList);
            POSTList = new List<FinancialOperation>();
        }
        catch (Exception ex)
        {
            await Alert(ex.Message);
        }
    }

    private async Task Alert(string message)
    {
        await JsRuntime.InvokeVoidAsync("Alert", message);
    }
}